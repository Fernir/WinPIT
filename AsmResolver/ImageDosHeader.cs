namespace AsmResolver
{
    /// <summary>
    /// Represents the DOS header of a windows assembly image.
    /// </summary>
    public class ImageDosHeader : FileSegment
    {
        private readonly byte[] _defaultDosHeader = 
        {
	        0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
	        0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

            // 0x3C: e_lfanew
            0x80, 0x00, 0x00, 0x00,

	        0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68,
	        0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
	        0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20,
	        0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        /// <summary>
        /// The valid byte sequence any DOS header should start with. This byte sequence reads "MZ" when converted to ASCII characters.
        /// </summary>
        public const ushort ValidMagicValue = 0x5A4D; 

        internal static ImageDosHeader FromReadingContext(ReadingContext context)
        {
            var reader = context.Reader;

            var header = new ImageDosHeader
            {
                StartOffset = reader.Position,
                Magic = reader.ReadUInt16()
            };

            reader.Position = 0x3C;
            header.Lfanew = reader.ReadUInt32();

            return header;
        }

        /// <summary>
        /// Gets the magic header the DOS header starts with. Generally this is equal to <see cref="ValidMagicValue"/>.
        /// </summary>
        public ushort Magic
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the offset to the NT headers in the windows image.
        /// </summary>
        public uint Lfanew
        {
            get;
            private set;
        }

        public override uint GetPhysicalLength()
        {
            return (uint)_defaultDosHeader.Length;
        }

        public override void Write(WritingContext context)
        {
            context.Writer.WriteBytes(_defaultDosHeader);
        }
    }
}